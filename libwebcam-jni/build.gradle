plugins {
    id "com.peterabeles.nativehelper" version "1.0.0"
}

apply plugin: 'java'

import com.peterabeles.NativeHelper

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

repositories {
    mavenCentral()
    mavenLocal()

    maven { url = "https://oss.sonatype.org/content/repositories/snapshots/" }
}

dependencies {
    ['core','swing'].each { String a->
        compile('org.boofcv:boofcv-'+a+':0.36')
    }

    testCompile group: 'junit', name: 'junit', version: '4.12'
}

tasks.withType(Test) {
    systemProperty "java.library.path", file("../build/jni")
}

test {
    ignoreFailures true
    reports.html.enabled = false

    testLogging {
        showStandardStreams = true
    }
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

// Get the location of the native code
if( project.hasProperty("native_build_location")) {
    ext.build_location = project.property("native_build_location")
} else {
    ext.build_location = "../build_release"
}
if( !file("$ext.build_location").exists() ) {
    throw new GradleException("Native build directory $ext.build_location does not exist!")
}

// Determine the native platform it's running on
ext.platform = NativeHelper.getPlatformName()

println "  Classifier name: $project.ext.platform"
println "  Native location: $project.ext.build_location"
task nativeJar(type: Jar) {
    classifier "$project.ext.platform"
    from files("$project.ext.build_location/libwebcam-jni/","$project.ext.build_location/libwebcam/")
    include 'libwebcamjni.*'
    include 'libwebcam.*'
}

artifacts {
    archives sourcesJar
//        archives javadocJar

    archives(nativeJar.archivePath) {
        type "jar"
        builtBy nativeJar
    }
}